{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ReadBlob",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "commonDataLakestorage2",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "filter1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          RepoID as string,",
				"          FileListUUID as string,",
				"          SubFilePath as string,",
				"          FileName as string,",
				"          FileSize as string,",
				"          FileLastModifiedDT as string,",
				"          FileCreatedDT as string,",
				"          TAG_PROTECT as string,",
				"          Path_lvl1 as string,",
				"          Path_lvl2 as string,",
				"          Path_lvl3 as string,",
				"          Path_lvl4 as string,",
				"          ProcessState as string,",
				"          ErrorCode as string,",
				"          ErrorCode2 as string,",
				"          AnnexationStartDate as string,",
				"          AnnexationEndDate as string,",
				"          AnnexLocation as string,",
				"          AnnexMD5Source as string,",
				"          AnnexMD5SDestination as string,",
				"          RestoreMD5 as string,",
				"          RestoreReason as string,",
				"          RestoreReasonFreeText as string,",
				"          UserName as string,",
				"          RestoreStartDate as string,",
				"          RestoreEndDate as string,",
				"          CleardownDate as string,",
				"          CleardownActionID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 filter(ProcessState=='AP') ~> filter1",
				"filter1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     filePattern:'outputafterfilter[n].csv',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}